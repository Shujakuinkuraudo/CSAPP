
main:     file format elf32-i386


Disassembly of section .init:

00001000 <_init>:
    1000:	f3 0f 1e fb          	endbr32 
    1004:	53                   	push   %ebx
    1005:	83 ec 08             	sub    $0x8,%esp
    1008:	e8 43 01 00 00       	call   1150 <__x86.get_pc_thunk.bx>
    100d:	81 c3 bb 2f 00 00    	add    $0x2fbb,%ebx
    1013:	8b 83 2c 00 00 00    	mov    0x2c(%ebx),%eax
    1019:	85 c0                	test   %eax,%eax
    101b:	74 02                	je     101f <_init+0x1f>
    101d:	ff d0                	call   *%eax
    101f:	83 c4 08             	add    $0x8,%esp
    1022:	5b                   	pop    %ebx
    1023:	c3                   	ret    

Disassembly of section .plt:

00001030 <.plt>:
    1030:	ff b3 04 00 00 00    	pushl  0x4(%ebx)
    1036:	ff a3 08 00 00 00    	jmp    *0x8(%ebx)
    103c:	0f 1f 40 00          	nopl   0x0(%eax)
    1040:	f3 0f 1e fb          	endbr32 
    1044:	68 00 00 00 00       	push   $0x0
    1049:	e9 e2 ff ff ff       	jmp    1030 <.plt>
    104e:	66 90                	xchg   %ax,%ax
    1050:	f3 0f 1e fb          	endbr32 
    1054:	68 08 00 00 00       	push   $0x8
    1059:	e9 d2 ff ff ff       	jmp    1030 <.plt>
    105e:	66 90                	xchg   %ax,%ax
    1060:	f3 0f 1e fb          	endbr32 
    1064:	68 10 00 00 00       	push   $0x10
    1069:	e9 c2 ff ff ff       	jmp    1030 <.plt>
    106e:	66 90                	xchg   %ax,%ax
    1070:	f3 0f 1e fb          	endbr32 
    1074:	68 18 00 00 00       	push   $0x18
    1079:	e9 b2 ff ff ff       	jmp    1030 <.plt>
    107e:	66 90                	xchg   %ax,%ax
    1080:	f3 0f 1e fb          	endbr32 
    1084:	68 20 00 00 00       	push   $0x20
    1089:	e9 a2 ff ff ff       	jmp    1030 <.plt>
    108e:	66 90                	xchg   %ax,%ax
    1090:	f3 0f 1e fb          	endbr32 
    1094:	68 28 00 00 00       	push   $0x28
    1099:	e9 92 ff ff ff       	jmp    1030 <.plt>
    109e:	66 90                	xchg   %ax,%ax

Disassembly of section .plt.got:

000010a0 <__cxa_finalize@plt>:
    10a0:	f3 0f 1e fb          	endbr32 
    10a4:	ff a3 28 00 00 00    	jmp    *0x28(%ebx)
    10aa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

Disassembly of section .plt.sec:

000010b0 <printf@plt>:
    10b0:	f3 0f 1e fb          	endbr32 
    10b4:	ff a3 0c 00 00 00    	jmp    *0xc(%ebx)
    10ba:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

000010c0 <__stack_chk_fail@plt>:
    10c0:	f3 0f 1e fb          	endbr32 
    10c4:	ff a3 10 00 00 00    	jmp    *0x10(%ebx)
    10ca:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

000010d0 <puts@plt>:
    10d0:	f3 0f 1e fb          	endbr32 
    10d4:	ff a3 14 00 00 00    	jmp    *0x14(%ebx)
    10da:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

000010e0 <__libc_start_main@plt>:
    10e0:	f3 0f 1e fb          	endbr32 
    10e4:	ff a3 18 00 00 00    	jmp    *0x18(%ebx)
    10ea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

000010f0 <putchar@plt>:
    10f0:	f3 0f 1e fb          	endbr32 
    10f4:	ff a3 1c 00 00 00    	jmp    *0x1c(%ebx)
    10fa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00001100 <__isoc99_scanf@plt>:
    1100:	f3 0f 1e fb          	endbr32 
    1104:	ff a3 20 00 00 00    	jmp    *0x20(%ebx)
    110a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

Disassembly of section .text:

00001110 <_start>:
    1110:	f3 0f 1e fb          	endbr32 
    1114:	31 ed                	xor    %ebp,%ebp
    1116:	5e                   	pop    %esi
    1117:	89 e1                	mov    %esp,%ecx
    1119:	83 e4 f0             	and    $0xfffffff0,%esp
    111c:	50                   	push   %eax
    111d:	54                   	push   %esp
    111e:	52                   	push   %edx
    111f:	e8 22 00 00 00       	call   1146 <_start+0x36>
    1124:	81 c3 a4 2e 00 00    	add    $0x2ea4,%ebx
    112a:	8d 83 48 d6 ff ff    	lea    -0x29b8(%ebx),%eax
    1130:	50                   	push   %eax
    1131:	8d 83 d8 d5 ff ff    	lea    -0x2a28(%ebx),%eax
    1137:	50                   	push   %eax
    1138:	51                   	push   %ecx
    1139:	56                   	push   %esi
    113a:	ff b3 30 00 00 00    	pushl  0x30(%ebx)
    1140:	e8 9b ff ff ff       	call   10e0 <__libc_start_main@plt>
    1145:	f4                   	hlt    
    1146:	8b 1c 24             	mov    (%esp),%ebx
    1149:	c3                   	ret    
    114a:	66 90                	xchg   %ax,%ax
    114c:	66 90                	xchg   %ax,%ax
    114e:	66 90                	xchg   %ax,%ax

00001150 <__x86.get_pc_thunk.bx>:
    1150:	8b 1c 24             	mov    (%esp),%ebx
    1153:	c3                   	ret    
    1154:	66 90                	xchg   %ax,%ax
    1156:	66 90                	xchg   %ax,%ax
    1158:	66 90                	xchg   %ax,%ax
    115a:	66 90                	xchg   %ax,%ax
    115c:	66 90                	xchg   %ax,%ax
    115e:	66 90                	xchg   %ax,%ax

00001160 <deregister_tm_clones>:
    1160:	e8 e4 00 00 00       	call   1249 <__x86.get_pc_thunk.dx>
    1165:	81 c2 63 2e 00 00    	add    $0x2e63,%edx
    116b:	8d 8a 40 00 00 00    	lea    0x40(%edx),%ecx
    1171:	8d 82 40 00 00 00    	lea    0x40(%edx),%eax
    1177:	39 c8                	cmp    %ecx,%eax
    1179:	74 1d                	je     1198 <deregister_tm_clones+0x38>
    117b:	8b 82 24 00 00 00    	mov    0x24(%edx),%eax
    1181:	85 c0                	test   %eax,%eax
    1183:	74 13                	je     1198 <deregister_tm_clones+0x38>
    1185:	55                   	push   %ebp
    1186:	89 e5                	mov    %esp,%ebp
    1188:	83 ec 14             	sub    $0x14,%esp
    118b:	51                   	push   %ecx
    118c:	ff d0                	call   *%eax
    118e:	83 c4 10             	add    $0x10,%esp
    1191:	c9                   	leave  
    1192:	c3                   	ret    
    1193:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    1197:	90                   	nop
    1198:	c3                   	ret    
    1199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

000011a0 <register_tm_clones>:
    11a0:	e8 a4 00 00 00       	call   1249 <__x86.get_pc_thunk.dx>
    11a5:	81 c2 23 2e 00 00    	add    $0x2e23,%edx
    11ab:	55                   	push   %ebp
    11ac:	89 e5                	mov    %esp,%ebp
    11ae:	53                   	push   %ebx
    11af:	8d 8a 40 00 00 00    	lea    0x40(%edx),%ecx
    11b5:	8d 82 40 00 00 00    	lea    0x40(%edx),%eax
    11bb:	83 ec 04             	sub    $0x4,%esp
    11be:	29 c8                	sub    %ecx,%eax
    11c0:	89 c3                	mov    %eax,%ebx
    11c2:	c1 e8 1f             	shr    $0x1f,%eax
    11c5:	c1 fb 02             	sar    $0x2,%ebx
    11c8:	01 d8                	add    %ebx,%eax
    11ca:	d1 f8                	sar    %eax
    11cc:	74 14                	je     11e2 <register_tm_clones+0x42>
    11ce:	8b 92 34 00 00 00    	mov    0x34(%edx),%edx
    11d4:	85 d2                	test   %edx,%edx
    11d6:	74 0a                	je     11e2 <register_tm_clones+0x42>
    11d8:	83 ec 08             	sub    $0x8,%esp
    11db:	50                   	push   %eax
    11dc:	51                   	push   %ecx
    11dd:	ff d2                	call   *%edx
    11df:	83 c4 10             	add    $0x10,%esp
    11e2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    11e5:	c9                   	leave  
    11e6:	c3                   	ret    
    11e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    11ee:	66 90                	xchg   %ax,%ax

000011f0 <__do_global_dtors_aux>:
    11f0:	f3 0f 1e fb          	endbr32 
    11f4:	55                   	push   %ebp
    11f5:	89 e5                	mov    %esp,%ebp
    11f7:	53                   	push   %ebx
    11f8:	e8 53 ff ff ff       	call   1150 <__x86.get_pc_thunk.bx>
    11fd:	81 c3 cb 2d 00 00    	add    $0x2dcb,%ebx
    1203:	83 ec 04             	sub    $0x4,%esp
    1206:	80 bb 40 00 00 00 00 	cmpb   $0x0,0x40(%ebx)
    120d:	75 27                	jne    1236 <__do_global_dtors_aux+0x46>
    120f:	8b 83 28 00 00 00    	mov    0x28(%ebx),%eax
    1215:	85 c0                	test   %eax,%eax
    1217:	74 11                	je     122a <__do_global_dtors_aux+0x3a>
    1219:	83 ec 0c             	sub    $0xc,%esp
    121c:	ff b3 3c 00 00 00    	pushl  0x3c(%ebx)
    1222:	e8 79 fe ff ff       	call   10a0 <__cxa_finalize@plt>
    1227:	83 c4 10             	add    $0x10,%esp
    122a:	e8 31 ff ff ff       	call   1160 <deregister_tm_clones>
    122f:	c6 83 40 00 00 00 01 	movb   $0x1,0x40(%ebx)
    1236:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    1239:	c9                   	leave  
    123a:	c3                   	ret    
    123b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
    123f:	90                   	nop

00001240 <frame_dummy>:
    1240:	f3 0f 1e fb          	endbr32 
    1244:	e9 57 ff ff ff       	jmp    11a0 <register_tm_clones>

00001249 <__x86.get_pc_thunk.dx>:
    1249:	8b 14 24             	mov    (%esp),%edx
    124c:	c3                   	ret    

0000124d <main>:
#include "printresult.h"
#define bool char
#define true 1
#define false 0
void main()
{
    124d:	f3 0f 1e fb          	endbr32 
    1251:	8d 4c 24 04          	lea    0x4(%esp),%ecx
    1255:	83 e4 f0             	and    $0xfffffff0,%esp
    1258:	ff 71 fc             	pushl  -0x4(%ecx)
    125b:	55                   	push   %ebp
    125c:	89 e5                	mov    %esp,%ebp
    125e:	53                   	push   %ebx
    125f:	51                   	push   %ecx
    1260:	83 ec 70             	sub    $0x70,%esp
    1263:	e8 e8 fe ff ff       	call   1150 <__x86.get_pc_thunk.bx>
    1268:	81 c3 60 2d 00 00    	add    $0x2d60,%ebx
    126e:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
    1274:	89 45 f4             	mov    %eax,-0xc(%ebp)
    1277:	31 c0                	xor    %eax,%eax
	int a[10],i;
	int b[10];
	printf("请输入10个数据:\n");
    1279:	83 ec 0c             	sub    $0xc,%esp
    127c:	8d 83 40 e0 ff ff    	lea    -0x1fc0(%ebx),%eax
    1282:	50                   	push   %eax
    1283:	e8 48 fe ff ff       	call   10d0 <puts@plt>
    1288:	83 c4 10             	add    $0x10,%esp
	for (i=0;i<10;i++)
    128b:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
    1292:	eb 30                	jmp    12c4 <main+0x77>
	{
		scanf("%d",&a[i]);
    1294:	8d 45 a4             	lea    -0x5c(%ebp),%eax
    1297:	8b 55 9c             	mov    -0x64(%ebp),%edx
    129a:	c1 e2 02             	shl    $0x2,%edx
    129d:	01 d0                	add    %edx,%eax
    129f:	83 ec 08             	sub    $0x8,%esp
    12a2:	50                   	push   %eax
    12a3:	8d 83 56 e0 ff ff    	lea    -0x1faa(%ebx),%eax
    12a9:	50                   	push   %eax
    12aa:	e8 51 fe ff ff       	call   1100 <__isoc99_scanf@plt>
    12af:	83 c4 10             	add    $0x10,%esp
		b[i] = a[i];
    12b2:	8b 45 9c             	mov    -0x64(%ebp),%eax
    12b5:	8b 54 85 a4          	mov    -0x5c(%ebp,%eax,4),%edx
    12b9:	8b 45 9c             	mov    -0x64(%ebp),%eax
    12bc:	89 54 85 cc          	mov    %edx,-0x34(%ebp,%eax,4)
	for (i=0;i<10;i++)
    12c0:	83 45 9c 01          	addl   $0x1,-0x64(%ebp)
    12c4:	83 7d 9c 09          	cmpl   $0x9,-0x64(%ebp)
    12c8:	7e ca                	jle    1294 <main+0x47>
	}
	bool flag = true;
    12ca:	c6 45 97 01          	movb   $0x1,-0x69(%ebp)
	while(flag == true)
    12ce:	e9 00 01 00 00       	jmp    13d3 <main+0x186>
	{
		printf("\n1.冒泡排序\n2.求和\n3.打印结果\n4.退出");
    12d3:	83 ec 0c             	sub    $0xc,%esp
    12d6:	8d 83 5c e0 ff ff    	lea    -0x1fa4(%ebx),%eax
    12dc:	50                   	push   %eax
    12dd:	e8 ce fd ff ff       	call   10b0 <printf@plt>
    12e2:	83 c4 10             	add    $0x10,%esp
		printf("\n请选择序号:");
    12e5:	83 ec 0c             	sub    $0xc,%esp
    12e8:	8d 83 8d e0 ff ff    	lea    -0x1f73(%ebx),%eax
    12ee:	50                   	push   %eax
    12ef:	e8 bc fd ff ff       	call   10b0 <printf@plt>
    12f4:	83 c4 10             	add    $0x10,%esp
		int number = 0;
    12f7:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
		scanf("%d",&number);
    12fe:	83 ec 08             	sub    $0x8,%esp
    1301:	8d 45 98             	lea    -0x68(%ebp),%eax
    1304:	50                   	push   %eax
    1305:	8d 83 56 e0 ff ff    	lea    -0x1faa(%ebx),%eax
    130b:	50                   	push   %eax
    130c:	e8 ef fd ff ff       	call   1100 <__isoc99_scanf@plt>
    1311:	83 c4 10             	add    $0x10,%esp
		int sum = 0;
    1314:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		switch(number)
    131b:	8b 45 98             	mov    -0x68(%ebp),%eax
    131e:	83 f8 04             	cmp    $0x4,%eax
    1321:	0f 84 93 00 00 00    	je     13ba <main+0x16d>
    1327:	83 f8 04             	cmp    $0x4,%eax
    132a:	0f 8f 90 00 00 00    	jg     13c0 <main+0x173>
    1330:	83 f8 03             	cmp    $0x3,%eax
    1333:	74 53                	je     1388 <main+0x13b>
    1335:	83 f8 03             	cmp    $0x3,%eax
    1338:	0f 8f 82 00 00 00    	jg     13c0 <main+0x173>
    133e:	83 f8 01             	cmp    $0x1,%eax
    1341:	74 07                	je     134a <main+0xfd>
    1343:	83 f8 02             	cmp    $0x2,%eax
    1346:	74 15                	je     135d <main+0x110>
    1348:	eb 76                	jmp    13c0 <main+0x173>
		{
			case 1:
				bubblesort(a,10);
    134a:	83 ec 08             	sub    $0x8,%esp
    134d:	6a 0a                	push   $0xa
    134f:	8d 45 a4             	lea    -0x5c(%ebp),%eax
    1352:	50                   	push   %eax
    1353:	e8 ae 00 00 00       	call   1406 <bubblesort>
    1358:	83 c4 10             	add    $0x10,%esp
				break;
    135b:	eb 76                	jmp    13d3 <main+0x186>
			case 2:
				sum = add(a,10);
    135d:	83 ec 08             	sub    $0x8,%esp
    1360:	6a 0a                	push   $0xa
    1362:	8d 45 a4             	lea    -0x5c(%ebp),%eax
    1365:	50                   	push   %eax
    1366:	e8 6b 01 00 00       	call   14d6 <add>
    136b:	83 c4 10             	add    $0x10,%esp
    136e:	89 45 a0             	mov    %eax,-0x60(%ebp)
				printf("\n数组求和结果为:%5d\n",sum);
    1371:	83 ec 08             	sub    $0x8,%esp
    1374:	ff 75 a0             	pushl  -0x60(%ebp)
    1377:	8d 83 9f e0 ff ff    	lea    -0x1f61(%ebx),%eax
    137d:	50                   	push   %eax
    137e:	e8 2d fd ff ff       	call   10b0 <printf@plt>
    1383:	83 c4 10             	add    $0x10,%esp
				break;
    1386:	eb 4b                	jmp    13d3 <main+0x186>
			case 3:
				printArray(b,10,"\n原始数组为:");
    1388:	83 ec 04             	sub    $0x4,%esp
    138b:	8d 83 bb e0 ff ff    	lea    -0x1f45(%ebx),%eax
    1391:	50                   	push   %eax
    1392:	6a 0a                	push   $0xa
    1394:	8d 45 cc             	lea    -0x34(%ebp),%eax
    1397:	50                   	push   %eax
    1398:	e8 82 01 00 00       	call   151f <printArray>
    139d:	83 c4 10             	add    $0x10,%esp
				printArray(a,10,"\n排序后数组为:");
    13a0:	83 ec 04             	sub    $0x4,%esp
    13a3:	8d 83 cd e0 ff ff    	lea    -0x1f33(%ebx),%eax
    13a9:	50                   	push   %eax
    13aa:	6a 0a                	push   $0xa
    13ac:	8d 45 a4             	lea    -0x5c(%ebp),%eax
    13af:	50                   	push   %eax
    13b0:	e8 6a 01 00 00       	call   151f <printArray>
    13b5:	83 c4 10             	add    $0x10,%esp
				break;
    13b8:	eb 19                	jmp    13d3 <main+0x186>
			case 4:
				flag = false;
    13ba:	c6 45 97 00          	movb   $0x0,-0x69(%ebp)
				break;
    13be:	eb 13                	jmp    13d3 <main+0x186>
			default:
				printf("\n请输入正确的序号!请继续!");
    13c0:	83 ec 0c             	sub    $0xc,%esp
    13c3:	8d 83 e4 e0 ff ff    	lea    -0x1f1c(%ebx),%eax
    13c9:	50                   	push   %eax
    13ca:	e8 e1 fc ff ff       	call   10b0 <printf@plt>
    13cf:	83 c4 10             	add    $0x10,%esp
				break;
    13d2:	90                   	nop
	while(flag == true)
    13d3:	80 7d 97 01          	cmpb   $0x1,-0x69(%ebp)
    13d7:	0f 84 f6 fe ff ff    	je     12d3 <main+0x86>

		}
	}
	printf("\n");
    13dd:	83 ec 0c             	sub    $0xc,%esp
    13e0:	6a 0a                	push   $0xa
    13e2:	e8 09 fd ff ff       	call   10f0 <putchar@plt>
    13e7:	83 c4 10             	add    $0x10,%esp

}
    13ea:	90                   	nop
    13eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
    13ee:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
    13f5:	74 05                	je     13fc <main+0x1af>
    13f7:	e8 24 02 00 00       	call   1620 <__stack_chk_fail_local>
    13fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
    13ff:	59                   	pop    %ecx
    1400:	5b                   	pop    %ebx
    1401:	5d                   	pop    %ebp
    1402:	8d 61 fc             	lea    -0x4(%ecx),%esp
    1405:	c3                   	ret    

00001406 <bubblesort>:
#include "bubblesort.h"
void bubblesort(int s[],int n)
{
    1406:	f3 0f 1e fb          	endbr32 
    140a:	55                   	push   %ebp
    140b:	89 e5                	mov    %esp,%ebp
    140d:	83 ec 10             	sub    $0x10,%esp
    1410:	e8 bd 00 00 00       	call   14d2 <__x86.get_pc_thunk.ax>
    1415:	05 b3 2b 00 00       	add    $0x2bb3,%eax
	int i,j,t;
	for(i=0;i<n;i++)
    141a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    1421:	e9 9c 00 00 00       	jmp    14c2 <bubblesort+0xbc>
		for(j=0;j<n-1-i;j++)
    1426:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    142d:	eb 7d                	jmp    14ac <bubblesort+0xa6>
			if(s[j]>s[j+1])
    142f:	8b 45 f8             	mov    -0x8(%ebp),%eax
    1432:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    1439:	8b 45 08             	mov    0x8(%ebp),%eax
    143c:	01 d0                	add    %edx,%eax
    143e:	8b 10                	mov    (%eax),%edx
    1440:	8b 45 f8             	mov    -0x8(%ebp),%eax
    1443:	83 c0 01             	add    $0x1,%eax
    1446:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
    144d:	8b 45 08             	mov    0x8(%ebp),%eax
    1450:	01 c8                	add    %ecx,%eax
    1452:	8b 00                	mov    (%eax),%eax
    1454:	39 c2                	cmp    %eax,%edx
    1456:	7e 50                	jle    14a8 <bubblesort+0xa2>
			{
				t = s[j];
    1458:	8b 45 f8             	mov    -0x8(%ebp),%eax
    145b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    1462:	8b 45 08             	mov    0x8(%ebp),%eax
    1465:	01 d0                	add    %edx,%eax
    1467:	8b 00                	mov    (%eax),%eax
    1469:	89 45 fc             	mov    %eax,-0x4(%ebp)
				s[j] = s[j+1];
    146c:	8b 45 f8             	mov    -0x8(%ebp),%eax
    146f:	83 c0 01             	add    $0x1,%eax
    1472:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    1479:	8b 45 08             	mov    0x8(%ebp),%eax
    147c:	01 d0                	add    %edx,%eax
    147e:	8b 55 f8             	mov    -0x8(%ebp),%edx
    1481:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
    1488:	8b 55 08             	mov    0x8(%ebp),%edx
    148b:	01 ca                	add    %ecx,%edx
    148d:	8b 00                	mov    (%eax),%eax
    148f:	89 02                	mov    %eax,(%edx)
				s[j+1] = t;
    1491:	8b 45 f8             	mov    -0x8(%ebp),%eax
    1494:	83 c0 01             	add    $0x1,%eax
    1497:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    149e:	8b 45 08             	mov    0x8(%ebp),%eax
    14a1:	01 c2                	add    %eax,%edx
    14a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
    14a6:	89 02                	mov    %eax,(%edx)
		for(j=0;j<n-1-i;j++)
    14a8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    14ac:	8b 45 0c             	mov    0xc(%ebp),%eax
    14af:	83 e8 01             	sub    $0x1,%eax
    14b2:	2b 45 f4             	sub    -0xc(%ebp),%eax
    14b5:	39 45 f8             	cmp    %eax,-0x8(%ebp)
    14b8:	0f 8c 71 ff ff ff    	jl     142f <bubblesort+0x29>
	for(i=0;i<n;i++)
    14be:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    14c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
    14c5:	3b 45 0c             	cmp    0xc(%ebp),%eax
    14c8:	0f 8c 58 ff ff ff    	jl     1426 <bubblesort+0x20>
			}
		
}
    14ce:	90                   	nop
    14cf:	90                   	nop
    14d0:	c9                   	leave  
    14d1:	c3                   	ret    

000014d2 <__x86.get_pc_thunk.ax>:
    14d2:	8b 04 24             	mov    (%esp),%eax
    14d5:	c3                   	ret    

000014d6 <add>:
#include "add.h"
int add(int s[],int n)
{
    14d6:	f3 0f 1e fb          	endbr32 
    14da:	55                   	push   %ebp
    14db:	89 e5                	mov    %esp,%ebp
    14dd:	83 ec 10             	sub    $0x10,%esp
    14e0:	e8 ed ff ff ff       	call   14d2 <__x86.get_pc_thunk.ax>
    14e5:	05 e3 2a 00 00       	add    $0x2ae3,%eax
	int result=0;
    14ea:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	int i;
	for(i=0;i<n;i++)
    14f1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    14f8:	eb 18                	jmp    1512 <add+0x3c>
		result += s[i];
    14fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
    14fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    1504:	8b 45 08             	mov    0x8(%ebp),%eax
    1507:	01 d0                	add    %edx,%eax
    1509:	8b 00                	mov    (%eax),%eax
    150b:	01 45 f8             	add    %eax,-0x8(%ebp)
	for(i=0;i<n;i++)
    150e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    1512:	8b 45 fc             	mov    -0x4(%ebp),%eax
    1515:	3b 45 0c             	cmp    0xc(%ebp),%eax
    1518:	7c e0                	jl     14fa <add+0x24>
	return result;
    151a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
    151d:	c9                   	leave  
    151e:	c3                   	ret    

0000151f <printArray>:
#include "printresult.h"
void printArray(int s[],int n,char *str)
{
    151f:	f3 0f 1e fb          	endbr32 
    1523:	55                   	push   %ebp
    1524:	89 e5                	mov    %esp,%ebp
    1526:	53                   	push   %ebx
    1527:	83 ec 14             	sub    $0x14,%esp
    152a:	e8 21 fc ff ff       	call   1150 <__x86.get_pc_thunk.bx>
    152f:	81 c3 99 2a 00 00    	add    $0x2a99,%ebx
	printf("%s",str);
    1535:	83 ec 08             	sub    $0x8,%esp
    1538:	ff 75 10             	pushl  0x10(%ebp)
    153b:	8d 83 09 e1 ff ff    	lea    -0x1ef7(%ebx),%eax
    1541:	50                   	push   %eax
    1542:	e8 69 fb ff ff       	call   10b0 <printf@plt>
    1547:	83 c4 10             	add    $0x10,%esp
	int i;
	for(i=0;i<n;i++)
    154a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    1551:	eb 28                	jmp    157b <printArray+0x5c>
		printf("%5d",s[i]);
    1553:	8b 45 f4             	mov    -0xc(%ebp),%eax
    1556:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    155d:	8b 45 08             	mov    0x8(%ebp),%eax
    1560:	01 d0                	add    %edx,%eax
    1562:	8b 00                	mov    (%eax),%eax
    1564:	83 ec 08             	sub    $0x8,%esp
    1567:	50                   	push   %eax
    1568:	8d 83 0c e1 ff ff    	lea    -0x1ef4(%ebx),%eax
    156e:	50                   	push   %eax
    156f:	e8 3c fb ff ff       	call   10b0 <printf@plt>
    1574:	83 c4 10             	add    $0x10,%esp
	for(i=0;i<n;i++)
    1577:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    157b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    157e:	3b 45 0c             	cmp    0xc(%ebp),%eax
    1581:	7c d0                	jl     1553 <printArray+0x34>
	printf("\n");
    1583:	83 ec 0c             	sub    $0xc,%esp
    1586:	6a 0a                	push   $0xa
    1588:	e8 63 fb ff ff       	call   10f0 <putchar@plt>
    158d:	83 c4 10             	add    $0x10,%esp
}
    1590:	90                   	nop
    1591:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    1594:	c9                   	leave  
    1595:	c3                   	ret    
    1596:	66 90                	xchg   %ax,%ax
    1598:	66 90                	xchg   %ax,%ax
    159a:	66 90                	xchg   %ax,%ax
    159c:	66 90                	xchg   %ax,%ax
    159e:	66 90                	xchg   %ax,%ax

000015a0 <__libc_csu_init>:
    15a0:	f3 0f 1e fb          	endbr32 
    15a4:	55                   	push   %ebp
    15a5:	e8 6b 00 00 00       	call   1615 <__x86.get_pc_thunk.bp>
    15aa:	81 c5 1e 2a 00 00    	add    $0x2a1e,%ebp
    15b0:	57                   	push   %edi
    15b1:	56                   	push   %esi
    15b2:	53                   	push   %ebx
    15b3:	83 ec 0c             	sub    $0xc,%esp
    15b6:	89 eb                	mov    %ebp,%ebx
    15b8:	8b 7c 24 28          	mov    0x28(%esp),%edi
    15bc:	e8 3f fa ff ff       	call   1000 <_init>
    15c1:	8d 9d 04 ff ff ff    	lea    -0xfc(%ebp),%ebx
    15c7:	8d 85 00 ff ff ff    	lea    -0x100(%ebp),%eax
    15cd:	29 c3                	sub    %eax,%ebx
    15cf:	c1 fb 02             	sar    $0x2,%ebx
    15d2:	74 29                	je     15fd <__libc_csu_init+0x5d>
    15d4:	31 f6                	xor    %esi,%esi
    15d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    15dd:	8d 76 00             	lea    0x0(%esi),%esi
    15e0:	83 ec 04             	sub    $0x4,%esp
    15e3:	57                   	push   %edi
    15e4:	ff 74 24 2c          	pushl  0x2c(%esp)
    15e8:	ff 74 24 2c          	pushl  0x2c(%esp)
    15ec:	ff 94 b5 00 ff ff ff 	call   *-0x100(%ebp,%esi,4)
    15f3:	83 c6 01             	add    $0x1,%esi
    15f6:	83 c4 10             	add    $0x10,%esp
    15f9:	39 f3                	cmp    %esi,%ebx
    15fb:	75 e3                	jne    15e0 <__libc_csu_init+0x40>
    15fd:	83 c4 0c             	add    $0xc,%esp
    1600:	5b                   	pop    %ebx
    1601:	5e                   	pop    %esi
    1602:	5f                   	pop    %edi
    1603:	5d                   	pop    %ebp
    1604:	c3                   	ret    
    1605:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
    160c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

00001610 <__libc_csu_fini>:
    1610:	f3 0f 1e fb          	endbr32 
    1614:	c3                   	ret    

00001615 <__x86.get_pc_thunk.bp>:
    1615:	8b 2c 24             	mov    (%esp),%ebp
    1618:	c3                   	ret    
    1619:	66 90                	xchg   %ax,%ax
    161b:	66 90                	xchg   %ax,%ax
    161d:	66 90                	xchg   %ax,%ax
    161f:	90                   	nop

00001620 <__stack_chk_fail_local>:
    1620:	f3 0f 1e fb          	endbr32 
    1624:	53                   	push   %ebx
    1625:	e8 26 fb ff ff       	call   1150 <__x86.get_pc_thunk.bx>
    162a:	81 c3 9e 29 00 00    	add    $0x299e,%ebx
    1630:	83 ec 08             	sub    $0x8,%esp
    1633:	e8 88 fa ff ff       	call   10c0 <__stack_chk_fail@plt>

Disassembly of section .fini:

00001638 <_fini>:
    1638:	f3 0f 1e fb          	endbr32 
    163c:	53                   	push   %ebx
    163d:	83 ec 08             	sub    $0x8,%esp
    1640:	e8 0b fb ff ff       	call   1150 <__x86.get_pc_thunk.bx>
    1645:	81 c3 83 29 00 00    	add    $0x2983,%ebx
    164b:	83 c4 08             	add    $0x8,%esp
    164e:	5b                   	pop    %ebx
    164f:	c3                   	ret    
